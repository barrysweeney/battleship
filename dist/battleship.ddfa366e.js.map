{"version":3,"sources":["battleship.js"],"names":["battleship","Ship","length","timesHit","getLength","hit","isSunk","Gameboard","positions","Array","fill","missedPositions","hitPositions","ships","shipsRemaining","shipSizes","getNumShipsRemaining","placeShip","startPosition","direction","ship","i","shipPos","push","shift","receiveAttack","positionIndex","includes","Player","attack","gameboard","Enemy","Math","round","random","playerGameboard","enemyGameboard","enemy","player","renderGame","playerGameboardContainer","document","querySelector","enemyGameboardContainer","playerGameboardHTML","map","position","index","join","enemyGameboardHTML","innerHTML","enemyGameboardDivs","children","forEach","div","addEventListener","feedback","console","log","innerText","module","exports"],"mappings":"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","file":"battleship.ddfa366e.js","sourceRoot":"..","sourcesContent":["// make 1d version with one ship to start\n\n// battleship module using revealing module pattern\nconst battleship = (function () {\n  \"use strict\";\n\n  const Ship = function (length) {\n    let timesHit = 0;\n    const getLength = () => length;\n\n    function hit() {\n      timesHit += 1;\n      // mark position as hit\n    }\n\n    const isSunk = () => timesHit === getLength();\n\n    return { isSunk, hit };\n  };\n\n  const Gameboard = function () {\n    const positions = Array(100).fill(\"water\");\n    const missedPositions = [];\n    const hitPositions = [];\n    const ships = [];\n    let shipsRemaining = 0;\n    const shipSizes = [5, 4, 3, 3, 3];\n    const getNumShipsRemaining = () => shipsRemaining;\n\n    const placeShip = (startPosition, direction) => {\n      // figure out start and end posiotions for ships\n      const ship = Ship(shipSizes[0]);\n      if (direction === \"horizontal\") {\n        for (let i = 0; i < shipSizes[0]; i++) {\n          let shipPos = startPosition + i;\n          positions[shipPos] = ship;\n        }\n      } else {\n        for (let i = 0; i < shipSizes[0]; i++) {\n          let shipPos = startPosition + 10 * i;\n          positions[shipPos] = ship;\n        }\n      }\n      ships.push(ship);\n      shipsRemaining += 1;\n      shipSizes.shift();\n    };\n\n    const receiveAttack = function (positionIndex) {\n      if (\n        typeof positions[positionIndex] === \"object\" &&\n        !hitPositions.includes(positionIndex) &&\n        !missedPositions.includes(positionIndex)\n      ) {\n        positions[positionIndex].hit();\n        hitPositions.push(positionIndex);\n        if (positions[positionIndex].isSunk()) {\n          shipsRemaining -= 1;\n        }\n      } else {\n        missedPositions.push(positionIndex);\n      }\n    };\n\n    return {\n      receiveAttack,\n      placeShip,\n      positions,\n      hitPositions,\n      missedPositions,\n      ships,\n      getNumShipsRemaining,\n    };\n  };\n\n  const Player = () => {\n    const attack = (gameboard, positionIndex) =>\n      gameboard.receiveAttack(positionIndex);\n    return { attack };\n  };\n\n  const Enemy = () => {\n    const attack = (gameboard) =>\n      gameboard.receiveAttack(\n        Math.round(Math.random() * playerGameboard.positions.length)\n      );\n    return { attack };\n  };\n\n  // setup players, gameboards and ships\n  const enemyGameboard = Gameboard();\n  const enemy = Enemy();\n  const playerGameboard = Gameboard();\n  const player = Player();\n\n  enemyGameboard.placeShip(1, \"horizontal\");\n  enemyGameboard.placeShip(8, \"vertical\");\n  enemyGameboard.placeShip(20, \"vertical\");\n  enemyGameboard.placeShip(45, \"vertical\");\n  enemyGameboard.placeShip(92, \"horizontal\");\n\n  playerGameboard.placeShip(1, \"horizontal\");\n  playerGameboard.placeShip(9, \"vertical\");\n  playerGameboard.placeShip(30, \"horizontal\");\n  playerGameboard.placeShip(75, \"horizontal\");\n  playerGameboard.placeShip(71, \"vertical\");\n\n  const renderGame = function () {\n    const playerGameboardContainer = document.querySelector(\".playerGameboard\");\n    const enemyGameboardContainer = document.querySelector(\".enemyGameboard\");\n\n    const playerGameboardHTML = playerGameboard.positions\n      .map((position, index) => {\n        return `<div class=\"${\n          playerGameboard.hitPositions.includes(index) ? \"hit\" : \"\"\n        }\">${typeof position === \"object\" ? \"ðŸš¢\" : \"ðŸŒŠ\"}</div>`;\n      })\n      .join(\"\");\n\n    const enemyGameboardHTML = enemyGameboard.positions\n      .map((position, index) => {\n        if (enemyGameboard.hitPositions.includes(index)) {\n          return `<div>ðŸš¢</div>`;\n        }\n        if (enemyGameboard.missedPositions.includes(index)) {\n          return `<div>ðŸŒŠ</div>`;\n        }\n        return `<div>?</div>`;\n      })\n      .join(\"\");\n\n    playerGameboardContainer.innerHTML = playerGameboardHTML;\n    enemyGameboardContainer.innerHTML = enemyGameboardHTML;\n\n    const enemyGameboardDivs = [...enemyGameboardContainer.children];\n    enemyGameboardDivs.forEach((div, index) =>\n      div.addEventListener(\"click\", () => {\n        player.attack(enemyGameboard, index);\n        enemy.attack(playerGameboard);\n        renderGame();\n      })\n    );\n\n    const feedback = document.querySelector(\".feedback\");\n    console.log(enemyGameboard.ships);\n\n    feedback.innerText = `${enemyGameboard.getNumShipsRemaining()} enemy ships remaining`;\n  };\n\n  renderGame();\n})();\n\nmodule.exports = battleship;\n"]}